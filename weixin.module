<?php

/*
 * This file is licensed under GPLv2+.
*/

/**
 * @file
 * Provides features interacting with weixin public open platform.
 */

define("WEIXIN_SEED_LENGTH",8);
define("WEIXIN_DIRECTION_INCOME",1);
define("WEIXIN_DIRECTION_OUTCOME",2);


// Define weixin classes
// Constructor: $wee = new WechatRequest($token, $_GET, $wxid, $post);
class WechatRequest
{
	public $wxid = NULL;
	public $msgid = NULL;
	public $username = NULL;
	public $msgtype = NULL;
	public $content = NULL;
	private $rawinput = NULL;
	
	public function __construct($token, $args, $wxid, $post=NULL) {
		if($this->checkSignature($token, $args)) {
			$this->wxid=$wxid;
			if(!empty($post)) $this->pharsePost($post);
		}
	}
	private function checkSignature($token, $get) {
		$signature = $get['signature'];
		$timestamp = $get["timestamp"];
		$nonce = $get["nonce"];
		$tmpArr = array($token, $timestamp, $nonce);
		asort($tmpArr, SORT_STRING);
		$tmpStr = implode( $tmpArr );
		$tmpStr = sha1( $tmpStr );
		if( $tmpStr == $signature ) return TRUE;
		else return FALSE;
	}
	
	private function pharsePost($post) {
		$postObj = simplexml_load_string($post, 'SimpleXMLElement', LIBXML_NOCDATA);
		if($postObj!= FALSE && $this->wxid == $postObj->ToUserName) {
			$this->rawinput = (string)$post;
			$this->username = (string)$postObj->FromUserName;
			if(property_exists($postObj, 'MsgId')) $this->msgid = (string)$postObj->MsgId;
			$this->msgtype = (string)$postObj->MsgType;
			switch($this->msgtype) {
				case 'text':
					$this->content = trim((string)$postObj->Content);
					break;
				case 'event':
					$this->content = array(
						(string)$postObj->Event => (string)$postObj->EventKey
					);
					break;
				case 'image':
					$this->content = (string)$postObj->PicUrl;
					break;
				case 'location':
					$this->content = array(
						'longitude' => (string)$postObj->Location_Y,
						'latitude' => (string)$postObj->Location_X,
					);
					break;
				case 'link':
					$this->content = (string)$postObj->Url;
					break;
			}
		}
		unset($postObj);
	}

	public function __toString() {
		return $this->rawinput;
	}
}

class WechatResponse
{
	private $wxid = NULL;
	public $username = NULL;
	public $requestid = NULL;
	private $type = NULL;
	private $content = NULL;
	private $music = array();
	private $news = array();
	private $stared = 0;
	
	public function __construct($request) {
		if(is_object($request) && get_class($request) == 'WechatRequest') {
			$this->wxid = $request->wxid;
			$this->username = $request->username;
			$this->requestid = $request->msgid;
		}
	}

	public function star($isstared=1) {
		$this->stared = $isstared;
	}

	public function text($content) {
		$this->type = 'text';
		$this->content = $content;
	}

	public function music($title, $description, $url, $hqurl=NULL) {
		if(empty($hqurl)) $hqurl=$url;
		$this->type = 'music';
		$this->music = array(
			'title' => $title,
			'description' => $description,
			'url' => url($url, array('absolute'=>TRUE)),
			'hqurl' => url($hqurl, array('absolute'=>TRUE))
		);
	}

	public function news($items) {
		$this->type = 'news';
		foreach($items as $item) {
			if(empty($item['title'])) continue;
			$this->news[]=array(
				'title'=>$item['title'],
				'description'=>empty($item['description'])?'':$item['description'],
				'picurl'=>url($item['picurl'], array('absolute'=>TRUE)),
				'url'=>url($item['url'], array('absolute'=>TRUE))
			);
		}
	}

	public function __toString() {
		$output = '';
		switch($this->type) {
			case 'text':
				$textTpl = "<xml><ToUserName><![CDATA[%s]]></ToUserName><FromUserName><![CDATA[%s]]></FromUserName><CreateTime>%s</CreateTime><MsgType><![CDATA[%s]]></MsgType><Content><![CDATA[%s]]></Content><FuncFlag>%s</FuncFlag></xml>";
				$output = sprintf($textTpl, $this->username, $this->wxid, time(), 'text', $this->content, $this->stared?1:0);
				break;
			case 'music':
				$textTpl = "<xml><ToUserName><![CDATA[%s]]></ToUserName><FromUserName><![CDATA[%s]]></FromUserName><CreateTime>%s</CreateTime><MsgType><![CDATA[%s]]></MsgType><Music><Title><![CDATA[%s]]></Title><Description><![CDATA[%s]]></Description><MusicUrl><![CDATA[%s]]></MusicUrl><HQMusicUrl><![CDATA[%s]]></HQMusicUrl></Music><FuncFlag>%s</FuncFlag></xml>";
				$output = sprintf($textTpl, $this->username, $this->wxid, time(), 'music',
					$this->music['title'], $this->music['description'], $this->music['url'], $this->music['hqurl'], $this->stared?1:0);
				break;
			case 'news':
				if(count($this->news)<=0) break;
				$news='<Articles>';
				foreach($this->news as $item) {
					$news .= sprintf("<item><Title><![CDATA[%s]]></Title><Description><![CDATA[%s]]></Description><PicUrl><![CDATA[%s]]></PicUrl><Url><![CDATA[%s]]></Url></item>",
						$item['title'], $item['description'], $item['picurl'], $item['url']
					);
				}
				$news.='</Articles>';
				$textTpl = "<xml><ToUserName><![CDATA[%s]]></ToUserName><FromUserName><![CDATA[%s]]></FromUserName><CreateTime>%s</CreateTime><MsgType><![CDATA[%s]]></MsgType><ArticleCount>%s</ArticleCount>%s<FuncFlag>1</FuncFlag></xml>";
				$output = sprintf($textTpl, $this->username, $this->wxid, time(), 'news',
					count($this->news), $news, $this->stared?1:0
				);
				break;
		}
		if(!empty($output)) return $output;
		else return '';
	}
}

/**
 * Implementation of hook_help().
 */
function weixin_help($path, $arg) {
	$output = '';
	switch ($path) {
		case 'admin/config/services/weixin':
			$output = '<p>'.t('In this page, you could set various settings regarding weixin public platform.').'</p>';
			break;
		case 'user/%/weixin':
			$output = '<p>'.t('In this page, you could bind your account with a weixin id, or detach your account from existing weixin id.').'</p>';
			break;
		case 'weixin':
			if(isset($arg) && $arg=='weixin') {
				$output = t('Welcome to @sitename. You are talking with robot now.',array('@sitename'=>variable_get('site_name')));
				$output .= t('You may send following instructions to interact with the robot.');
			}
			break;
		default:
			return;
	}
	return $output;
}

/**
 * Implementation of hook_permission
 */
function weixin_permission() {
	return array(
		'allow weixin binding' => array(
			'title' => t('Allow binding with weixin account'),
		),
	);
}

/**
 * Implementation of hook_menu().
 */
function weixin_menu() {
	$items['admin/config/services/weixin'] = array(
		'title' => 'weixin rules',
		'description' => 'weixin configuration and customized rules for response.',
		'access arguments' => array('access administration pages'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('weixin_admin_form'),
	);
	$items['weixin'] = array(
		'title' => 'weixin',
		'description' => 'weixin interface',
		'page callback' => 'weixin_response',
		'access callback' => 'weixin_response_access',
		'type' => MENU_CALLBACK,
	);
	$items['user/%user/weixin'] = array(
		'title' => 'Weixin binding',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('weixin_user_binding',1),
		'type' => MENU_LOCAL_TASK,
		'access callback' => 'weixin_user_access',
		'access arguments' => array(1),
	);
	$items['user/%user/weixin_avatar.jpg'] = array(
		'page callback' => 'weixin_user_avatar',
		'page arguments' => array(1),
		'type' => MENU_CALLBACK,
		'access callback' => 'weixin_user_avatar_access',
		'access arguments' => array(1),
	);
	$items['user/%user/weixin_qrcode_callback'] = array(
		'page callback' => 'weixin_qrcode_callback',
		'page arguments' => array(1),
		'type' => MENU_CALLBACK,
		'access callback' => 'weixin_user_access',
		'access arguments' => array(1),
	);
	return $items;
}

function weixin_user_access($user) {
	$r=variable_get('weixinid', '');
	if(empty($r)) return FALSE;
	if($user->uid==$GLOBALS['user']->uid) return user_access('allow weixin binding');
	else return user_access('allow weixin binding', $user) && user_access('administer users');
}

function weixin_log_load($lid) {
	$log=db_select('weixin_log','l')->condition('l.logid',$lid)->fields('l')->execute()->fetchObject();
	if($log) {
		$content=$log->content;
		$log->content=simplexml_load_string($content, 'SimpleXMLElement', LIBXML_NOCDATA);
		return $log;
	} else return FALSE;
}

function weixin_log_save($obj) {
	if(get_class($obj)=='WechatRequest') {
		return db_insert('weixin_log')->fields(array(
			'refid' => $obj->msgid,
			'direction' => WEIXIN_DIRECTION_INCOME,
			'opposite' => $obj->username,
			'timestamp' => time(),
			'content' => (string)$obj,
		))->execute();
	} else if(get_class($obj)=='WechatResponse') {
		$privlid=db_select('weixin_log','l')->condition('l.refid',$obj->requestid)->fields('l',array('logid'))->execute()->fetchField();
		return db_insert('weixin_log')->fields(array(
			'direction' => WEIXIN_DIRECTION_OUTCOME,
			'opposite' => $obj->username,
			'timestamp' => time(),
			'previouslid' => $privlid,
			'content' => (string)$obj,
		))->execute();
	}

}

function weixin_admin_form($form, $form_state) {
	$form=array(
		'#submit' => array('weixin_admin_form_submit'),
	);
	$form['weixinname'] = array(
		'#type' => 'machine_name',
		'#title' => t('Site global weixin account name'),
		'#description' => t('Weixin account name to display in binding page.'),
		'#default_value' => variable_get('weixinname', ''),
		'#required' => TRUE,
		'#machine_name' => array(
			'exists' => 'weixin_name_fake_exists',
		),
	);
	$form['weixinid'] = array(
		'#type' => 'machine_name',
		'#title' => t('Site global weixin id'),
		'#description' => t('Messages sent to other weixinid will be ignored automatically.'),
		'#default_value' => variable_get('weixinid', ''),
		'#required' => TRUE,
		'#machine_name' => array(
			'exists' => 'weixin_name_fake_exists',
		),
	);
	$form['weixintoken'] = array(
		'#type' => 'textfield',
		'#title' => t('Token'),
		'#description' => t('The token set in weixin public platform.'),
		'#default_value' => variable_get('weixintoken', ''),
		'#required' => TRUE,
	);
	$form['weixinappid'] = array(
		'#type' => 'textfield',
		'#title' => t('AppID'),
		'#description' => t('The appid given by weixin public platform.'),
		'#default_value' => variable_get('weixinappid', ''),
	);
	$form['weixinappsecret'] = array(
		'#type' => 'textfield',
		'#title' => t('AppSecret'),
		'#description' => t('The app secret given by weixin public platform.'),
		'#default_value' => variable_get('weixinappsecret', ''),
	);
	return system_settings_form($form);
}

function weixin_name_fake_exists($value) {
	return FALSE;
}

function weixin_admin_form_validate($form, $form_state) {
	if(!empty($form_state['values']['weixinappid'])) {
		if(empty($form_state['values']['weixinappsecret']))
			form_set_error('weixinappsecret', t('AppSecret cannot be empty if appid is set.'));
		else {
			$url=sprintf('https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=%s&secret=%s',
				$form_state['values']['weixinappid'], $form_state['values']['weixinappsecret']
				);
			$r=drupal_http_request($url);
			if($r->code !='200') {
				form_set_error('appid', t('There are communication error now, please try again later.'));
			} else {
				$resp=json_decode($r->data);
				if(empty($resp->access_token)) {
					form_set_error('appid', t('There appid or appsecret is invalid.'));
					form_set_error('appsecret');
				} else {
					$resp->expires_in+=time();
					variable_set('weixinaccess_token', $resp);
				}
			}
		}
	}

}

function weixin_admin_form_submit($form, $form_state) {
	$settings=array(
		'weixinname', 'weixinid', 'weixintoken', 'weixinappid', 'weixinappsecret'
	);
	foreach($settings as $s) {
		variable_set($s, $form_state['values'][$s]);
	}
	if(empty($form_state['values']['weixinappid'])) {
		variable_del('weixinaccess_token');
	}

	if(empty($form_state['values']['weixinappid'])) return;
	$menus=module_invoke_all('weixin_menu');
	$weixin_menu=array();
	foreach($menus as $menuitem) {
		$weixin_menu[$menuitem['weight']]=$menuitem['title'];
	}

	// Update menu
	$weixin_menu_export=array();
	for($i=1; $i<=3; $i++) {
		for($j=1;$j<=5;$j++) {
			if(isset($weixin_menu[$i*10+$j]))
				$weixin_menu_export[$i-1][$j-1]=array(
					'type' => 'click',
					'name' => $weixin_menu[$i*10+$j],
					'key' => 'weixin_menu_'.$i.$j,
				);
		}
		if(empty($weixin_menu_export[$i-1])) {
			if(isset($weixin_menu[$i]))
				$weixin_menu_export[$i-1]=array(
					"type" => "click",
					'name' => $weixin_menu[$i],
					'key' => 'weixin_menu_'.$i,
				);
		} else {
			$item=$weixin_menu_export[$i-1];
			$weixin_menu_export[$i-1]=array(
				'name' => $weixin_menu[$i],
				'sub_button' => $item
			);
		}
	}
	$menu=sprintf('{"button":%s}',json_encode($weixin_menu_export));
	$access_token=_weixin_access_token();

	$url=sprintf('https://api.weixin.qq.com/cgi-bin/menu/delete?access_token=%s', $access_token);
	$r=drupal_http_request($url);
	if($r->code !='200') return FALSE;
	$resp=json_decode($r->data);
	if($resp->errcode!=0) {
		drupal_set_message(t('Customized menu delete failed: !errcode @errmsg',
			array('!errcode'=>$resp->errcode, '@errmsg'=>$resp->errmsg)), 'error');
		return;
	}

	$url=sprintf('https://api.weixin.qq.com/cgi-bin/menu/create?access_token=%s', $access_token);
	$options = array(
		'method' => 'POST',
		'data' => $menu,
	);
	$r=drupal_http_request($url, $options);
	if($r->code !='200') return FALSE;
	$resp=json_decode($r->data);
	if($resp->errcode!=0) {
		drupal_set_message(t('Customized menu set failed: !errcode @errmsg',
			array('!errcode'=>$resp->errcode, '@errmsg'=>$resp->errmsg)), 'error');
	} else
		drupal_set_message(t('Customized menu set.'));
}

function _weixin_access_token() {
	$v=variable_get('weixinappid');
	if(empty($v)) return FALSE;
	$v=variable_get('weixinaccess_token');
	if(empty($v) || $v->expires_in <= time()) {
		$url=sprintf('https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=%s&secret=%s',
			variable_get('weixinappid'), variable_get('weixinappsecret')
			);
		$r=drupal_http_request($url);
		if($r->code !='200') return FALSE;
		$resp=json_decode($r->data);
		if(empty($resp->access_token)) return FALSE;
		$resp->expires_in+=time();
		variable_set('weixinaccess_token', $resp);
		return $resp->access_token;
	} else return $v->access_token;
}

function _weixin_get_user_info($openid) {
	if(empty($openid)) return FALSE;
	$access_token=_weixin_access_token();
	if(empty($access_token)) return FALSE;
	$url=sprintf('https://api.weixin.qq.com/cgi-bin/user/info?access_token=%s&openid=%s',
		$access_token, $openid);
	$r=drupal_http_request($url);
	if($r->code !='200') return FALSE;
	$resp=json_decode($r->data);
	if(empty($resp->openid)) return FALSE;
	return $resp;
}

function weixin_response() {
	$wxid=variable_get('weixinid', '');
	$token=variable_get('weixintoken', '');
	$request = new WechatRequest($token, $_GET, $wxid, file_get_contents("php://input"));
	// If connecting to public platform, then echo $_GET['echostr'] and exit.
	if($_SERVER['REQUEST_METHOD']=='GET') {
		watchdog('weixin',
			'Site connected with weixin public platform via @wxid (token @token).',
			array('@wxid' => $wxid, '@token' => $token),
			WATCHDOG_INFO
		);
		drupal_add_http_header('Content-Type', 'text/plain; charset=utf-8');
		echo $_GET['echostr'];
		drupal_exit();
	}
	
	// Fill up relative structure
	if(!$request->username) drupal_exit();
	if($request->msgid) {
		$r=db_select('weixin_log','l')->condition('l.refid',$request->msgid)->condition('l.direction',WEIXIN_DIRECTION_INCOME)->fields('l')->execute();
		if($r->rowCount()) drupal_exit();
	}
	
	$user=user_load(0);
	$r=db_query('SELECT uid FROM {users_weixin} WHERE wx_openid=:wx_openid AND status=1',array(':wx_openid'=>$request->username))->fetchObject();
	if($r && isset($r->uid))
		$user=user_load($r->uid);
	$result=module_invoke_all('weixin', $request, $user);
	$resptype='text';
	foreach($result as $r) {
		if(in_array(gettype($r),array('array'))) {
			$resptypes=array_keys($r);
			$resptype=$resptypes[0];
			unset($resptypes);
			$results=array_values($r);
			$result=$results[0];
			unset($results);
			break;
		}
	}
	if($resptype=='text')
		$result=implode($result, '\n');
	drupal_add_http_header('Content-Type', 'application/xml; charset=utf-8');
	if(empty($result)) $result=(($user->uid)?t('Hello @username.',array('@username'=>$user->name)):'').'/:--b'.t('Sorry, but I cannot understand what you are taking about.').t('Please send ? to list all the instructions.');

	$resp=new WechatResponse($request);
	call_user_func(array($resp, $resptype), $result);
	
	watchdog('weixin',
		'Recieved id @content and returned id @response.',
		array('@content'=>weixin_log_save($request), '@response'=>weixin_log_save($resp)),
		WATCHDOG_DEBUG
	);
	echo $resp;
	drupal_exit();
}

function weixin_response_access() {
	$wxid=variable_get('weixinid', '');
	if(empty($wxid)) return FALSE;
	$token=variable_get('weixintoken', '');
	$req = new WechatRequest($token, $_GET, $wxid);
	// If wxid is not set, the the request is invalid.
	return !empty($req->wxid);
}

function weixin_user_binding($form, $form_state, $user) {
	$form=array();
	$form['#user']=$user;
	$form['#attached']['css']=array(
		'div#edit-weixinuser { height: 60px; vertical-align: middle; padding-left: 40px;}'.
		'div#edit-weixinuser > img { width: 50px; height: 50px; vertical-align: middle;}'.
		'div#edit-weixinuser > span { padding-left: 10px; height: 50px;}'.
		'div#weixin_qrcode { display: inline-block; margin-left: 40px; width: 380px; margin-bottom: 20px;}'.
		'div#weixin_qrcode > img#weixin_qrcode { width: 300px; height: 300px;}'.
		'div#weixin_qrcode > img#weixin_qrcode_phone_scan { display: none; padding-bottom: 20px; margin-left: -100px; top: 30px; position: relative; height: 205px;}'.
		'' => array('type'=>'inline')
	);
	$r=db_query('SELECT EXISTS (SELECT * FROM {users_weixin} WHERE uid=:uid AND status=1)', array(':uid'=>$user->uid))->fetchField();

	// Means it has been bound with
	if($r) { // this user has already bound with weixin account
		$nickname=db_query('SELECT nickname FROM {users_weixin} WHERE uid=:uid', array(':uid'=>$user->uid))->fetchField();
		if(empty($nickname))
			weixin_user_login(array(), $user);
		$nickname=db_query('SELECT nickname FROM {users_weixin} WHERE uid=:uid', array(':uid'=>$user->uid))->fetchField();
		if($nickname) {
			$form['description']=array(
				'#type' => 'item',
				'#markup' => t('You are now bound with following weixin account.'),
			);
			$form['weixinuser']=array(
				'#type' => 'item',
				'#markup' => sprintf('<img src="%s"/>', url('user/'.$user->uid.'/weixin_avatar.jpg')).'<span>'.$nickname.'</span>',
			);
		} else {
			$form['description']=array(
				'#type' => 'markup',
				'#markup' => '<p>'.t('It seems that you have already bound your account with weixin id.').t('If you want to detach your account, please click following button.').'</p>',
			);
		}
		$form['submit'] = array(
			'#type' => 'submit',
			'#value' => t('Unbound'),
			'#submit' => array('weixin_user_binding_unbound'),
		);
	} else {
		$form['#attached']['js']=array('function worker() {'.
			'jQuery.get("'.$GLOBALS['base_path'].'user/'.$user->uid.'/weixin_qrcode_callback", function(data) {'.
				"if(data=='0') {setTimeout(worker, 5000);}".
				'else location.reload(true);'.
				'});'.
			'} '.
			'jQuery(document).ready(function() {setTimeout(worker, 5000);});' => array('type'=>'inline'));
		$form['description']=array(
			'#type' => 'markup',
			'#markup' => '<p>'.t('You haven\'t bound your account with weixin id.').t('If you want to bind your account, please do as following.').'</p>',
		);
		$weixin_access_token=_weixin_access_token();
		if(empty($weixin_access_token)) $showqrcode=FALSE;
		else {
			$url=sprintf('https://api.weixin.qq.com/cgi-bin/qrcode/create?access_token=%s',
				$weixin_access_token);
			$key=mt_rand(1,pow(2, 31));
			$param=json_encode(array(
				'expire_seconds' => 5*60,
				'action_name' => 'QR_SCENE',
				'action_info' => array('scene' => array('scene_id' => $key)),
			));
			$options = array(
				'method' => 'POST',
				'data' => $param,
			);
			$q=drupal_http_request($url, $options);
			if($q->code != '200') $showqrcode=FALSE;
			else {
				$resp=json_decode($q->data);
				if(empty($resp->ticket)) $showqrcode=FALSE;
				else $showqrcode=TRUE;
			}
		}
		if($showqrcode) {
			$form['#attached']['js']+=array(
				'jQuery(document).ready(function() {'.
					'jQuery("div#weixin_qrcode").mouseenter(function() {jQuery("img#weixin_qrcode_phone_scan").fadeIn();});'.
					'jQuery("div#weixin_qrcode").mouseleave(function() {jQuery("img#weixin_qrcode_phone_scan").fadeOut();});'.
				'});' => array('type' => 'inline')
			);
			$imgurl=sprintf('https://mp.weixin.qq.com/cgi-bin/showqrcode?ticket=%s',
				urlencode($resp->ticket));
			$form['scan']=array(
				'#type' => 'item',
				'#markup' => t('Scan following qrcode to bind your account with !weixinid.', array('!weixinid'=>'<code>'.variable_get('weixinname').'</code>'))
			);
			$form['qrcode']=array(
				'#type' => 'markup',
				'#prefix' => '<div id="weixin_qrcode">',
				'#markup' => sprintf('<img id="weixin_qrcode" src="%s"/>', $imgurl).
					sprintf('<img id="weixin_qrcode_phone_scan" '.
						'src="%s/qrcode_scan_phone.png">', $GLOBALS['base_path'].drupal_get_path('module', 'weixin')),
				'#suffix' => '</div>',
			);
			db_merge('weixin_validation')->key(array('uid'=>$user->uid))->fields(array(
				'uid' => $user->uid,
				'seed' => $key,
				'validation_code' => $key,
				'expiration_time' => time()+5*60,
			))->execute();
		} else {
			$result=db_query('SELECT EXISTS(SELECT * FROM {weixin_validation} WHERE uid=:uid AND expiration_time<:time)',
				array(':uid'=>$user->uid, ':time'=>time()))->fetchField();
			if($result) {
				$seed='';
				$validationcode='';
				$allowable_characters = 'ABCEFHIKLMNPQRSTUVWXYZ';
				do {
					$seed='';
					$validationcode='';
					$len = strlen($allowable_characters) - 1;
					for($i=0;$i<WEIXIN_SEED_LENGTH;$i++) {
						$seed.=$allowable_characters[mt_rand(0, $len)];
						$validationcode.=$allowable_characters[mt_rand(0, $len)];
					}
					$r=db_query('SELECT EXISTS(SELECT * FROM {weixin_validation} WHERE seed=:seed OR validation_code=:code)',
						array(':seed'=>$seed, ':code'=>$validationcode))->fetchField();
				} while ($r);
				db_delete('weixin_validation')->condition('uid',$user->uid)->execute();
				db_insert('weixin_validation')->fields(array(
					'uid' => $user->uid,
					'seed' => $seed,
					'validation_code' => $validationcode,
					'expiration_time'=> time()+300,
				))->execute();
			}
			$r=db_query('SELECT * FROM {weixin_validation} WHERE uid=:uid',array(':uid'=>$user->uid))->fetchObject();
			$seed=$r->seed;
			$validationcode=$r->validation_code;
			$form['step1']=array(
				'#type' => 'item',
				'#title' => '1. '.t('Follow <code>@code</code> in your weixin client',array('@code'=>variable_get('weixinname', ''))),
				'#description' => '<div><img src="'.url(drupal_get_path('module', 'weixin').'/qrcode.jpg').'" valign="top"/>'.t('Scan this qrcode or search <code>@code</code> in your weixin client.', array('@code'=>variable_get('weixinname', ''))).'</div>',
			);
			$form['step2']=array(
				'#type' => 'textfield',
				'#size' => 10,
				'#disabled' => TRUE,
				'#value' => $seed,
				'#title' => '2. '.t('Send following code to <code>@code</code>' ,array('@code'=>variable_get('weixinname', ''))),
				'#description' => t('The code will expire in five minutes. If time passed, please <a href="@url">refresh the page</a>.', array('@url'=>url('user/'.$user->uid.'/weixin'))),
				'#attributes'=>array('style'=>'font-size: 40px'),
			);
			$form['step3']=array(
				'#type' => 'textfield',
				'#required' => TRUE,
				'#size' => 10,
				'#title' => '3. '.t('Enter the validation code here'),
				'#description' => t('Input the validation code you received in your weixin client.'),
				'#attributes'=>array('style'=>'font-size: 40px'),
				'#maxlength'=>WEIXIN_SEED_LENGTH,
			);
			$form['submit'] = array(
				'#type' => 'submit',
				'#value' => t('Bind my account'),
			);
		}
	}
	
	return $form;
}

function weixin_user_binding_validate($form, &$form_state) {
	if(isset($form_state['values']['step3'])) {
		$result=db_query('SELECT EXISTS (SELECT * FROM {users_weixin} WHERE status=0 AND uid=:uid)',
			array(':uid'=>$form['#user']->uid))->fetchField();
		if(!$result) {
			form_set_error('step3', t('It seems that you have not send the message to our weixina public account.')); return;
		}
		$query=db_select('weixin_validation','w')->condition('seed',$form_state['values']['step2'])->fields('w');
		$result=$query->execute();
		switch($result->rowCount()) {
			case 0:
				$form_state['rebuild']=true; break;
			case 1:
				$r=$result->fetchObject();
				if($r->validation_code != strtoupper($form_state['values']['step3'])) {
					form_set_error('step3', t('The validation code you have entered is wrong.')); break;
				}
		}
	}
}

function weixin_user_binding_submit($form, &$form_state) {
	db_update('users_weixin')->condition('uid',$form['#user']->uid)->condition('status',0)->fields(array(
		'status'=>1,
	))->execute();
	db_delete('weixin_validation')->condition('uid',$form['#user']->uid)->execute();
	$r=db_query('SELECT wx_openid FROM {users_weixin} WHERE uid=:uid',array(':uid'=>$form['#user']->uid))->fetchField();
	watchdog('weixin',
		'@username bound his account with weixin id @wxid.',
		array('@username'=>$form['#user']->name, '@wxid'=>$r),
		WATCHDOG_INFO
	);
	drupal_set_message(t('Weixin acccount bound successfully.'));
}

function weixin_user_binding_unbound($form, $form_state) {
	db_delete('users_weixin')->condition('uid',$form['#user']->uid)->execute();
	watchdog('weixin',
		'@user detached his weixin account.',
		array('@user'=>$form['#user']->name),
		WATCHDOG_INFO
	);
	drupal_set_message(t('Weixin acccount detached.'));
}

function weixin_user_avatar_access($user) {
	if(empty($user->uid)) return FALSE;
	$r=variable_get('weixinappid');
	if(empty($r)) return FALSE;
	$r=cache_get('weixin:avatar:'.$user->uid);
	if(!empty($r->data)) return TRUE;
	else {
		$r=db_query('SELECT avatar FROM {users_weixin} WHERE uid=:uid', array(':uid'=>$user->uid))->fetchField();
		if(empty($r)) return FALSE;
		cache_set('weixin:avatar:'.$user->uid, $r);
		return TRUE;
	}
}

function weixin_user_avatar($user) {
	$r=cache_get('weixin:avatar:'.$user->uid);
	echo $r->data;
	drupal_add_http_header('Content-type', 'image/jpg; charset=binary', TRUE);
	drupal_add_http_header('Content-Transfer-Encoding', 'binary', TRUE);
	exit;
}

function weixin_user_login($edit, $account) {
	$openid=db_query('SELECT wx_openid FROM {users_weixin} WHERE uid=:uid and STATUS=1', array(':uid'=>$account->uid))->fetchField();
	if(empty($openid)) return;
	$user_info=_weixin_get_user_info($openid);
	if(empty($user_info)) return;
	db_update('users_weixin')->condition('uid',$account->uid)->fields(array(
		'nickname' => $user_info->nickname
	))->execute();
	$url=$user_info->headimgurl;
	$r=drupal_http_request($url);
	if($r->code!='200') return;
	db_update('users_weixin')->condition('uid',$account->uid)->fields(array(
		'avatar' => $r->data
	))->execute();
	cache_set('weixin:avatar:'.$account->uid, $r->data);
}

function weixin_qrcode_callback($user) {
	$query=db_query('SELECT EXISTS(SELECT * FROM {users_weixin} WHERE uid=:uid AND status=1)',
		array(':uid'=>$user->uid));
	$r=$query->fetchField();
	if(empty($r))
		$r=db_query('SELECT EXISTS(SELECT * FROM {weixin_validation} WHERE expiration_time<:time AND uid=:uid)',
			array(':time'=>time(), ':uid'=>$user->uid))->fetchField();
	drupal_json_output($r);
}

function weixin_weixin($request, $user) {
	if($request->msgtype=='event') {
		$event=key($request->content);
		$eventkey=$request->content[$event];
		// If welcome message should be displayed:
		if($event=='subscribe') {
			$t=t('Welcome to @sitename. You are talking with robot now.',array('@sitename'=>variable_get('site_name')));
			if(!empty($eventkey)) {
				$scene_id=substr($eventkey, 8);
				if($uid=db_query('SELECT uid FROM {weixin_validation} WHERE expiration_time>=:time AND seed=:seed',
					array(':time'=>time(), ':seed'=>$scene_id))->fetchField()) {
					db_merge('users_weixin')->key(array('uid'=>$uid))->fields(array(
						'uid' => $uid,
						'wx_openid' => $request->username,
						'status' => 1
					))->execute();
					db_delete('weixin_validation')->condition('uid',$uid)->execute();
					$user=user_load($uid);
					$t.=t('You have now bind with !username.', array('!username'=>format_username($user)));
				}
			}
		}
		if($event=='unsubscribe') {
			db_delete('users_weixin')->condition('wx_openid',$request->username)->execute();
			watchdog('weixin',
				'User @username unsubscribed the account.',
				array('@username'=>$user->name),
				WATCHDOG_DEBUG
			); 
		}
		if($event='scan') {
			if(!empty($eventkey)) {
				$scene_id=$eventkey;
				if($uid=db_query('SELECT uid FROM {weixin_validation} WHERE expiration_time<=:time AND seed=:seed',
					array(':time'=>time(), ':seed'=>$scene_id))->fetchField()) {
					db_merge('users_weixin')->key(array('uid'=>$uid))->fields(array(
						'uid' => $uid,
						'wx_openid' => $request->username,
						'status' => 1
					))->execute();
					$user=user_load($uid);
					$t=t('You have now bind with !username.', array('!username'=>$user->name));
				}
			}
		}
	}
	if(is_array($$request->content)) return;

	$content=trim($request->content);
	if($request->msgtype=='text' && in_array($content, array('?', "？", t('Help')))) {
		$t=weixin_help('weixin','weixin');
		$t.="\n\n";
		$t.=implode(array_filter(module_invoke_all('help','weixin',NULL)),"\n\n");
	}
	// If sent given number of ucase chars, then validate it.
	if($request->msgtype=='text' && preg_match('/^[A-Z]{'.WEIXIN_SEED_LENGTH.'}$/',$content)) {
		$r=db_query('SELECT * FROM {weixin_validation} WHERE seed=:seed', array(':seed'=>$content))->fetchObject();
		if($r) {
			// Lets check if the users have been registered with another account at first
			$c=db_query('SELECT EXISTS (SELECT * FROM {users_weixin} WHERE wx_openid=:wx_openid)', array(':wx_openid'=>$request->username))->fetchField();
			if($c>0)
				$t=t('Sorry, you have already registered with another account at @sitename.', array('@sitename'=>variable_get('site_name')));
			else if($r->expiration_time < time())
				$t=t('The code you have entered has expired. Please fresh the page.');
			else {
				$t=t('Your validation code is @code, please input it at website.', array('@code' => $r->validation_code));
				db_delete('users_weixin')->condition('uid',$r->uid)->execute();
				db_insert('users_weixin')->fields(array(
					'uid' => $r->uid,
					'wx_openid' => $request->username,
					'status' => 0,
				))->execute();
			}
		}
	}
	// If user want to unbound the weixin account, then do it.
	if($request->msgtype=='text' && preg_match('/'.t('Unbound').'/',$content)) {
		$r=db_delete('users_weixin')->condition('uid',$user->uid)->execute();
		if($r) {
			$t=t('@username has been unbound with your weixin account.', array('@username'=>$user->name));
			watchdog('weixin',
				'@username unbound his account with weixin.',
				array('@username'=>$user->name),
				WATCHDOG_DEBUG
			); 
		} else {
			$t=t('You haven\'t bound your weixin account yet.');
		}
	}

	if(isset($t)) return $t;
}

function weixin_weixin_menu() {
	$menu=array();
	$menu[]=array('title'=>t('I'), 'weight'=>1);
	$menu[]=array('title'=>t('Bind / Unbind'), 'weight'=>11);
	return $menu;
}

function weixin_is_wechat_browser() {
	return preg_match('/ MicroMessenger\//', $_SERVER['HTTP_USER_AGENT']);
}

function weixin_cron() {
	db_delete('weixin_validation')->condition('expiration_time',time(),'<')->execute();
}

/**
 *  * Implementation of hook_uninstall().
 *   */
function weixin_uninstall() {
	$settings=array(
		'weixinname', 'weixinid', 'weixintoken', 'weixinappid', 'weixinappsecret'
	);
	foreach($settings as $s) {
		variable_del($s);
	}
	cache_clear_all('weixin:', 'cache', TRUE);
}

